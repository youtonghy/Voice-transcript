const { app, BrowserWindow, ipcMain, Menu, dialog } = require('electron');
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

let mainWindow;
let settingsWindow;
let mediaTranscribeWindow;
// Python杩涚▼绠＄悊
let pythonProcess;
let mediaTranscribeProcess;
let pythonBuffer = ''; // 鐢ㄤ簬缂撳瓨涓嶅畬鏁寸殑JSON娑堟伅
let pythonReady = false;
let pendingMessages = []; // 缂撳瓨寰呭彂閫佺殑娑堟伅
let restartingPython = false; // 闃叉閲嶅閲嶅惎
let restartAfterUserStopPending = false; // 鐢ㄦ埛鎵嬪姩鍋滄褰曢煶鍚庡緟閲嶅惎鏍囪
let isRecordingFlag = false; // 是否处于录音中（用于配置变更时的重启策略）
let config = {
  openai_api_key: '',
  openai_base_url: '',
  soniox_api_key: '',
  stt_provider: 'openai',
  enable_translation: true,
  translate_language: '涓枃',
  theater_mode: false
};

// 閰嶇疆鏂囦欢璺緞锛氬紑鍙戠幆澧冧娇鐢ㄩ」鐩洰褰曪紱鎵撳寘鍚庝娇鐢ㄧ敤鎴风洰褰?const isPackaged = app.isPackaged;
const userDataPath = app.getPath('userData');
const configPath = isPackaged
  ? path.join(userDataPath, 'config.json')
  : path.join(__dirname, 'config.json');

// 鍔犺浇閰嶇疆
function loadConfig() {
  try {
    if (fs.existsSync(configPath)) {
      const data = fs.readFileSync(configPath, 'utf8');
      config = { ...config, ...JSON.parse(data) };
    }
  } catch (error) {
    console.error('鍔犺浇閰嶇疆澶辫触:', error);
  }
}

// 淇濆瓨閰嶇疆
function saveConfig() {
  try {
    // 纭繚鐩綍瀛樺湪锛堟墦鍖呯幆澧冧笅鍦ㄧ敤鎴锋暟鎹洰褰曪級
    const dir = path.dirname(configPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  } catch (error) {
    console.error('淇濆瓨閰嶇疆澶辫触:', error);
  }
}

// 澶勭悊Python杩涚▼杈撳嚭鐨勫嚱鏁?function processPythonOutput(data) {
  const dataStr = data.toString('utf8');
  console.log('Python鍘熷杈撳嚭:', dataStr);
  
  // 灏嗘柊鏁版嵁娣诲姞鍒扮紦鍐插尯
  pythonBuffer += dataStr;
  
  // 灏濊瘯鎻愬彇瀹屾暣鐨凧SON娑堟伅
  const messages = [];
  let braceCount = 0;
  let inString = false;
  let escapeNext = false;
  let currentMessage = '';
  
  for (let i = 0; i < pythonBuffer.length; i++) {
    const char = pythonBuffer[i];
    currentMessage += char;
    
    if (escapeNext) {
      escapeNext = false;
      continue;
    }
    
    if (char === '\\') {
      escapeNext = true;
      continue;
    }
    
    if (char === '"') {
      inString = !inString;
      continue;
    }
    
    if (!inString) {
      if (char === '{') {
        braceCount++;
      } else if (char === '}') {
        braceCount--;
        if (braceCount === 0) {
          // 鎵惧埌瀹屾暣鐨凧SON娑堟伅
          messages.push(currentMessage.trim());
          currentMessage = '';
        }
      }
    }
  }
  
  // 鏇存柊缂撳啿鍖猴紝淇濈暀鏈畬鎴愮殑娑堟伅
  pythonBuffer = currentMessage;
  
  // 澶勭悊鎻愬彇鍑虹殑瀹屾暣娑堟伅
  messages.forEach(messageStr => {
    if (messageStr) {
      try {
        const message = JSON.parse(messageStr);
        console.log('瑙ｆ瀽鐨凱ython娑堟伅:', message);
        
        // 鏂版彙鎵嬶細鏀跺埌閰嶇疆搴旂敤纭锛岃涓哄氨缁?        if (!pythonReady && message.type === 'config_applied' && message.success) {
          pythonReady = true;
          console.log('Python鏈嶅姟宸插氨缁紙閰嶇疆宸插簲鐢級锛屽鐞嗗緟鍙戦€佹秷鎭?);
          while (pendingMessages.length > 0) {
            const pendingMessage = pendingMessages.shift();
            sendToPythonDirect(pendingMessage);
          }
        }
        
        if (mainWindow) {
          mainWindow.webContents.send('python-message', message);
        }

        // 监听语音活动，标记可能处于录音中
        if (message.type === 'voice_activity' && message.active) {
          isRecordingFlag = true;
        }

        // 妫€娴嬪綍闊冲仠姝簨浠讹紝鐢ㄤ簬鎸夐渶閲嶅惎鏈嶅姟
        if (message.type === 'recording_stopped') {
          console.log('妫€娴嬪埌褰曢煶宸插仠姝簨浠?);
          isRecordingFlag = false;
          if (restartAfterUserStopPending) {
            console.log('鐢ㄦ埛璇锋眰鐨勫綍闊冲仠姝㈠悗閲嶅惎鏍囪涓虹湡锛屽紑濮嬩紭闆呴噸鍚?);
            restartAfterUserStopPending = false;
            restartPythonServiceAfterStop();
          }
        }
      } catch (error) {
        console.error('JSON瑙ｆ瀽澶辫触:', error);
        console.error('闂娑堟伅:', messageStr);
        
        // 鍙戦€佸師濮嬫秷鎭綔涓烘棩蹇?        if (mainWindow) {
          mainWindow.webContents.send('python-message', {
            type: 'log',
            level: 'warning',
            message: `Python杈撳嚭瑙ｆ瀽澶辫触: ${messageStr}`,
            timestamp: new Date().toISOString()
          });
        }
      }
    }
  });
}

// 鐩存帴鍙戦€佹秷鎭埌Python锛堜笉妫€鏌ョ姸鎬侊級
function sendToPythonDirect(message) {
  try {
    const jsonMessage = JSON.stringify(message) + '\n';
    console.log('鐩存帴鍙戦€佸埌Python:', jsonMessage.trim());
    pythonProcess.stdin.write(jsonMessage);
    return true;
  } catch (error) {
    console.error('鐩存帴鍙戦€佹秷鎭け璐?', error);
    return false;
  }
}

function createWindow() {
  try {
    mainWindow = new BrowserWindow({
      width: 1000,
      height: 700,
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: path.join(__dirname, 'preload.js')
      },
      icon: path.join(__dirname, 'assets', 'icon.png'),
      title: '璇煶杞啓缈昏瘧宸ュ叿',
      show: false // 鍏堜笉鏄剧ず锛屽姞杞藉畬鎴愬悗鍐嶆樉绀?    });

    mainWindow.loadFile('index.html');

    // 绛夊緟椤甸潰鍑嗗灏辩华鍚庡啀鏄剧ず绐楀彛
    mainWindow.once('ready-to-show', () => {
      mainWindow.show();
      console.log('绐楀彛宸叉樉绀?);
    });

    // 寮€鍙戞ā寮忎笅鎵撳紑寮€鍙戣€呭伐鍏?    if (process.argv.includes('--dev')) {
      mainWindow.webContents.openDevTools();
    }

    mainWindow.on('closed', () => {
      mainWindow = null;
    });

    // 娣诲姞閿欒澶勭悊
    mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
      console.error('椤甸潰鍔犺浇澶辫触:', errorCode, errorDescription);
    });

  } catch (error) {
    console.error('鍒涘缓绐楀彛鏃跺彂鐢熼敊璇?', error);
    app.quit();
  }
}

function createSettingsWindow() {
  if (settingsWindow) {
    settingsWindow.focus();
    return;
  }

  settingsWindow = new BrowserWindow({
    width: 500,
    height: 600,
    parent: mainWindow,
    modal: false,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    },
    title: '璁剧疆',
    resizable: false
  });

  settingsWindow.loadFile('settings.html');

  settingsWindow.on('closed', () => {
    settingsWindow = null;
  });
}

function createMediaTranscribeWindow() {
  if (mediaTranscribeWindow) {
    mediaTranscribeWindow.focus();
    return;
  }

  mediaTranscribeWindow = new BrowserWindow({
    width: 1100,
    height: 720,
    parent: mainWindow,
    modal: false,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    },
    title: '濯掍綋鏂囦欢杞啓',
    resizable: true
  });

  mediaTranscribeWindow.loadFile('media-transcribe.html');

  mediaTranscribeWindow.on('closed', () => {
    mediaTranscribeWindow = null;
  });
}

// 灏嗗獟浣撹浆鍐欒繘搴︽秷鎭彂閫佸埌鎵€鏈夌浉鍏崇獥鍙?function sendMediaProgress(message) {
  try {
    if (mainWindow) {
      mainWindow.webContents.send('media-progress', message);
    }
    if (mediaTranscribeWindow) {
      mediaTranscribeWindow.webContents.send('media-progress', message);
    }
  } catch (e) {
    console.warn('鍙戦€佸獟浣撹繘搴︽秷鎭け璐?', e.message);
  }
}

function startPythonService() {
  console.log('startPythonService called');
  
  // 宸叉湁杩愯涓殑鏈嶅姟鍒欎笉閲嶅鍚姩锛屼繚鎸佸崟瀹炰緥
  if (pythonProcess) {
    console.log('妫€娴嬪埌宸叉湁杞啓鏈嶅姟杩涚▼锛岃烦杩囧惎鍔?);
    return true;
  }

  // 閲嶇疆鐘舵€?  pythonReady = false;
  pythonBuffer = '';
  pendingMessages = [];

  console.log('鍚姩杞啓鏈嶅姟...');
  const userCwd = isPackaged ? userDataPath : __dirname;
  
  // 浼樺厛瀵绘壘宸茬紪璇戠殑exe鏂囦欢
  let servicePath = null;
  let useSystemPython = false;
  
  // 鎸変紭鍏堢骇鎼滅储鍙墽琛屾枃浠?  const candidates = [];
  
  if (isPackaged) {
    // 鎵撳寘鍚庣幆澧冿細浠巖esources鐩綍鏌ユ壘
    candidates.push(path.join(process.resourcesPath, 'python', 'transcribe_service.exe'));
  } else {
    // 寮€鍙戠幆澧冿細浼樺厛浣跨敤宸茬紪璇戠殑exe
    candidates.push(path.join(__dirname, 'dist-python', 'win', 'transcribe_service.exe'));
    candidates.push(path.join(__dirname, 'dist', 'transcribe_service.exe'));
  }

  // 鏌ユ壘鍙敤鐨別xe鏂囦欢
  for (const candidate of candidates) {
    if (fs.existsSync(candidate)) {
      servicePath = candidate;
      console.log('鎵惧埌杞啓鏈嶅姟鍙墽琛屾枃浠?', servicePath);
      break;
    }
  }

  // 濡傛灉娌℃湁鎵惧埌exe鏂囦欢锛屾墠鑰冭檻浣跨敤Python鑴氭湰锛堜粎鍦ㄥ紑鍙戞ā寮忎笅锛?  if (!servicePath && !isPackaged) {
    const pythonScript = path.join(__dirname, 'transcribe_service.py');
    if (fs.existsSync(pythonScript)) {
      // 鍙湁鍦ㄩ厤缃腑鏄庣‘鎸囧畾Python璺緞鏃舵墠浣跨敤鑴氭湰妯″紡
      const configPythonPath = config.python_path;
      if (configPythonPath) {
        servicePath = configPythonPath;
        useSystemPython = true;
        console.log('浣跨敤閰嶇疆鐨凱ython璺緞杩愯鑴氭湰:', configPythonPath, pythonScript);
      } else {
        console.warn('鏈壘鍒板彲鎵ц鏂囦欢锛屼笖鏈厤缃甈ython璺緞銆傝鍦ㄨ缃腑閰嶇疆Python璺緞鎴栬繍琛?npm run build:py:win 缂栬瘧鏈嶅姟銆?);
        if (mainWindow) {
          mainWindow.webContents.send('python-message', {
            type: 'log',
            level: 'error',
            message: '杞啓鏈嶅姟涓嶅彲鐢細鏈壘鍒板彲鎵ц鏂囦欢涓旀湭閰嶇疆Python璺緞銆傝鍦ㄨ缃腑閰嶇疆Python璺緞鎴栭噸鏂扮紪璇戞湇鍔°€?,
            timestamp: new Date().toISOString()
          });
        }
        return false;
      }
    }
  }

  if (!servicePath) {
    const errorMsg = '鏃犳硶鍚姩杞啓鏈嶅姟锛氭湭鎵惧埌鍙墽琛屾枃浠躲€傝杩愯 npm run build:py:win 缂栬瘧鏈嶅姟銆?;
    console.error(errorMsg);
    if (mainWindow) {
      mainWindow.webContents.send('python-message', {
        type: 'log',
        level: 'error',
        message: errorMsg,
        timestamp: new Date().toISOString()
      });
    }
    return false;
  }
  
  try {
    let spawnCmd, spawnArgs;
    
    if (useSystemPython) {
      spawnCmd = servicePath;
      spawnArgs = [path.join(__dirname, 'transcribe_service.py')];
    } else {
      spawnCmd = servicePath;
      spawnArgs = [];
    }
    
    console.log('鍚姩杞啓鏈嶅姟:', spawnCmd, spawnArgs);
    
    // 璁剧疆鐜鍙橀噺
    const processEnv = { 
      ...process.env, 
      PYTHONUNBUFFERED: '1',
      PYTHONIOENCODING: 'utf-8'
    };
    
    // 濡傛灉鏄紑鍙戞ā寮忥紝鍚敤璋冭瘯鏃ュ織
    if (process.argv.includes('--dev') || process.env.NODE_ENV === 'development') {
      processEnv.ELECTRON_DEBUG = '1';
      console.log('璋冭瘯妯″紡宸插惎鐢紝Python鏈嶅姟灏嗚緭鍑鸿缁嗘棩蹇?);
    }
    
    pythonProcess = spawn(spawnCmd, spawnArgs, {
      stdio: ['pipe', 'pipe', 'pipe'],
      cwd: userCwd,
      env: processEnv
    });

    console.log('杞啓鏈嶅姟宸插惎鍔紝PID:', pythonProcess.pid);

    // 浣跨敤鏂扮殑杈撳嚭澶勭悊鍑芥暟
    pythonProcess.stdout.on('data', processPythonOutput);

    pythonProcess.stderr.on('data', (data) => {
      const errorOutput = data.toString('utf8');
      console.error('Python stderr:', errorOutput);

      // 鍦ㄨ皟璇曟ā寮忎笅锛屾樉绀烘洿璇︾粏鐨剆tderr淇℃伅
      if (processEnv.ELECTRON_DEBUG === '1') {
        console.log('Python璋冭瘯淇℃伅:', errorOutput);
      }

      if (mainWindow) {
        mainWindow.webContents.send('python-message', {
          type: 'log',
          level: 'error',
          message: `Python閿欒: ${errorOutput.trim()}`,
          timestamp: new Date().toISOString()
        });
      }
    });

    pythonProcess.on('error', (error) => {
      console.error('Python杩涚▼鍚姩澶辫触:', error);
      pythonReady = false;
      if (mainWindow) {
        mainWindow.webContents.send('python-message', {
          type: 'log',
          level: 'error',
          message: `Python杩涚▼鍚姩澶辫触: ${error.message}`,
          timestamp: new Date().toISOString()
        });
      }
      pythonProcess = null;
    });

    pythonProcess.on('close', (code, signal) => {
      console.log(`Python杩涚▼閫€鍑猴紝浠ｇ爜: ${code}, 淇″彿: ${signal}`);
      pythonReady = false;
      if (mainWindow) {
        mainWindow.webContents.send('python-message', {
          type: 'log',
          level: 'warning',
          message: `杞啓鏈嶅姟宸插仠姝?(閫€鍑轰唬鐮? ${code}, 淇″彿: ${signal})`,
          timestamp: new Date().toISOString()
        });
      }
      pythonProcess = null;
    });

    pythonProcess.on('spawn', () => {
      console.log('杞啓鏈嶅姟杩涚▼宸插惎鍔紝绛夊緟鍒濆鍖栧畬鎴?..');
      if (mainWindow) {
        mainWindow.webContents.send('python-message', {
          type: 'log',
          level: 'info',
          message: '杞啓鏈嶅姟杩涚▼宸插惎鍔?,
          timestamp: new Date().toISOString()
        });
      }

      // 绔嬪嵆鍙戦€佸垵濮嬮厤缃紱濡傛湭灏辩华灏嗚嚜鍔ㄥ叆闃?      console.log('鍙戦€佸垵濮嬮厤缃埌杞啓鏈嶅姟(绔嬪嵆):', config);
      sendToPythonDirect({ type: 'update_config', config });
    });

    return true;
  } catch (error) {
    console.error('鍚姩杞啓鏈嶅姟澶辫触:', error);
    pythonReady = false;
    if (mainWindow) {
      mainWindow.webContents.send('python-message', {
        type: 'log',
        level: 'error',
        message: `鍚姩杞啓鏈嶅姟澶辫触: ${error.message}`,
        timestamp: new Date().toISOString()
      });
    }
    return false;
  }
}

function sendToPython(message) {
  console.log('鍑嗗鍙戦€佹秷鎭埌杞啓鏈嶅姟:', message);

  if (!pythonProcess) {
    console.error('杞啓鏈嶅姟杩涚▼涓嶅瓨鍦紝鏃犳硶鍙戦€佹秷鎭?);
    if (mainWindow) {
      mainWindow.webContents.send('python-message', {
        type: 'log',
        level: 'error',
        message: '杞啓鏈嶅姟鏈惎鍔紝鏃犳硶鍙戦€佸懡浠?,
        timestamp: new Date().toISOString()
      });
    }
    return false;
  }

  if (!pythonProcess.stdin) {
    console.error('杞啓鏈嶅姟杩涚▼stdin涓嶅彲鐢?);
    if (mainWindow) {
      mainWindow.webContents.send('python-message', {
        type: 'log',
        level: 'error',
        message: '杞啓鏈嶅姟閫氫俊绠￠亾涓嶅彲鐢?,
        timestamp: new Date().toISOString()
      });
    }
    return false;
  }

  // 濡傛灉Python鏈嶅姟鏈氨缁紝灏嗘秷鎭姞鍏ュ緟鍙戦€侀槦鍒?  if (!pythonReady) {
    console.log('Python鏈嶅姟鏈氨缁紝娑堟伅鍔犲叆寰呭彂閫侀槦鍒?);
    pendingMessages.push(message);
    return true;
  }

  return sendToPythonDirect(message);
}

// 鐢ㄦ埛鎵嬪姩鍋滄褰曢煶鍚庤Е鍙戠殑浼橀泤閲嶅惎閫昏緫
function restartPythonServiceAfterStop() {
  if (!pythonProcess) {
    console.log('杞啓鏈嶅姟杩涚▼涓嶅瓨鍦紝鐩存帴鍚姩鏂板疄渚?);
    startPythonService();
    return;
  }

  if (restartingPython) {
    console.log('閲嶅惎涓紝蹇界暐閲嶅瑙﹀彂');
    return;
  }

  restartingPython = true;
  try {
    console.log('鍙戦€佸叧闂懡浠や互浼橀泤閫€鍑鸿浆鍐欐湇鍔?);
    // 灏濊瘯浼橀泤鍏抽棴
    sendToPythonDirect({ type: 'shutdown' });
  } catch (e) {
    console.warn('鍙戦€佸叧闂懡浠ゅけ璐ワ紝鏀逛负鐩存帴缁堟:', e.message);
  }

  let closed = false;
  const onClose = () => {
    if (closed) return;
    closed = true;
    console.log('鏃ц浆鍐欐湇鍔″凡閫€鍑猴紝鍑嗗閲嶅惎');
    pythonProcess = null;
    setTimeout(() => {
      const ok = startPythonService();
      restartingPython = false;
      console.log('閲嶅惎缁撴灉:', ok);
    }, 500);
  };

  // 涓€娆℃€х洃鍚叧闂?  const closeHandler = (code, signal) => {
    console.log('鏀跺埌杞啓鏈嶅姟鍏抽棴浜嬩欢(閲嶅惎娴佺▼):', code, signal);
    if (pythonProcess) {
      pythonProcess.removeListener('close', closeHandler);
    }
    onClose();
  };
  if (pythonProcess) {
    pythonProcess.once('close', closeHandler);
  }

  // 瓒呮椂寮哄埗鍏抽棴
  setTimeout(() => {
    if (!closed) {
      console.warn('绛夊緟浼橀泤鍏抽棴瓒呮椂锛屽己鍒剁粓姝㈣繘绋?);
      try {
        pythonProcess && pythonProcess.kill();
      } catch (e) {}
    }
  }, 5000);
}

// IPC浜嬩欢澶勭悊
ipcMain.handle('start-recording', () => {
  console.log('鏀跺埌寮€濮嬪綍闊宠姹?);
  const result = sendToPython({ type: 'start_recording' });
  console.log('寮€濮嬪綍闊冲懡浠ゅ彂閫佺粨鏋?', result);
  return result;
});

ipcMain.handle('stop-recording', () => {
  console.log('鏀跺埌鍋滄褰曢煶璇锋眰');
  restartAfterUserStopPending = true; // 鏍囪鐢ㄦ埛鎵嬪姩鍋滄锛屽綍闊冲仠姝㈠悗灏嗛噸鍚湇鍔?  const result = sendToPython({ type: 'stop_recording' });
  console.log('鍋滄褰曢煶鍛戒护鍙戦€佺粨鏋?', result);
  return result;
});

ipcMain.handle('get-config', () => {
  console.log('鏀跺埌鑾峰彇閰嶇疆璇锋眰锛屽綋鍓嶉厤缃?', config);
  return config;
});

// 鎻愪緵鍚庣鏈嶅姟鐘舵€佺粰娓叉煋杩涚▼锛岄伩鍏嶉〉闈㈠垏鎹㈠悗璇垽涓衡€滅瓑寰呮湇鍔″惎鍔ㄢ€?ipcMain.handle('get-service-status', () => {
  return {
    running: !!pythonProcess,
    ready: pythonReady,
    pid: pythonProcess ? pythonProcess.pid : null
  };
});

ipcMain.handle('save-config', (event, newConfig) => {
  console.log('收到保存配置请求:', newConfig);
  config = { ...config, ...newConfig };
  saveConfig();
  console.log('配置已保存，准备重启转写服务应用配置');
  try {
    if (isRecordingFlag) {
      console.log('当前处于录音中：先请求停止，待停止后自动重启');
      restartAfterUserStopPending = true;
      sendToPython({ type: 'stop_recording' });
    } else {
      console.log('未在录音：直接重启转写服务');
      restartPythonServiceAfterStop();
    }
  } catch (e) {
    console.warn('触发重启失败，将尝试直接启动:', e.message);
    startPythonService();
  }
  return true;
});






